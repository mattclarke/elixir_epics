// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SEVERITY: i16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SEVERITY: i16 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SEVERITY: [Severity; 4] = [
  Severity::OK,
  Severity::MINOR,
  Severity::MAJOR,
  Severity::INVALID,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Severity(pub i16);
#[allow(non_upper_case_globals)]
impl Severity {
  pub const OK: Self = Self(0);
  pub const MINOR: Self = Self(1);
  pub const MAJOR: Self = Self(2);
  pub const INVALID: Self = Self(3);

  pub const ENUM_MIN: i16 = 0;
  pub const ENUM_MAX: i16 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::OK,
    Self::MINOR,
    Self::MAJOR,
    Self::INVALID,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::OK => Some("OK"),
      Self::MINOR => Some("MINOR"),
      Self::MAJOR => Some("MAJOR"),
      Self::INVALID => Some("INVALID"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Severity {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Severity {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Severity {
    type Output = Severity;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Severity {
  type Scalar = i16;
  #[inline]
  fn to_little_endian(self) -> i16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i16) -> Self {
    let b = i16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Severity {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Severity {}
pub enum AlarmOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Alarm<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Alarm<'a> {
  type Inner = Alarm<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Alarm<'a> {
  pub const VT_SOURCE_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 6;
  pub const VT_SEVERITY: flatbuffers::VOffsetT = 8;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Alarm { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AlarmArgs<'args>
  ) -> flatbuffers::WIPOffset<Alarm<'bldr>> {
    let mut builder = AlarmBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.message { builder.add_message(x); }
    if let Some(x) = args.source_name { builder.add_source_name(x); }
    builder.add_severity(args.severity);
    builder.finish()
  }


  #[inline]
  pub fn source_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Alarm::VT_SOURCE_NAME, None)}
  }
  #[inline]
  pub fn timestamp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(Alarm::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn severity(&self) -> Severity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Severity>(Alarm::VT_SEVERITY, Some(Severity::OK)).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Alarm::VT_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for Alarm<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source_name", Self::VT_SOURCE_NAME, false)?
     .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<Severity>("severity", Self::VT_SEVERITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct AlarmArgs<'a> {
    pub source_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp: i64,
    pub severity: Severity,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AlarmArgs<'a> {
  #[inline]
  fn default() -> Self {
    AlarmArgs {
      source_name: None,
      timestamp: 0,
      severity: Severity::OK,
      message: None,
    }
  }
}

pub struct AlarmBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AlarmBuilder<'a, 'b> {
  #[inline]
  pub fn add_source_name(&mut self, source_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Alarm::VT_SOURCE_NAME, source_name);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: i64) {
    self.fbb_.push_slot::<i64>(Alarm::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_severity(&mut self, severity: Severity) {
    self.fbb_.push_slot::<Severity>(Alarm::VT_SEVERITY, severity, Severity::OK);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Alarm::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AlarmBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AlarmBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Alarm<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Alarm<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Alarm");
      ds.field("source_name", &self.source_name());
      ds.field("timestamp", &self.timestamp());
      ds.field("severity", &self.severity());
      ds.field("message", &self.message());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Alarm`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_alarm_unchecked`.
pub fn root_as_alarm(buf: &[u8]) -> Result<Alarm, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Alarm>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Alarm` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_alarm_unchecked`.
pub fn size_prefixed_root_as_alarm(buf: &[u8]) -> Result<Alarm, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Alarm>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Alarm` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_alarm_unchecked`.
pub fn root_as_alarm_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Alarm<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Alarm<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Alarm` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_alarm_unchecked`.
pub fn size_prefixed_root_as_alarm_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Alarm<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Alarm<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Alarm and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Alarm`.
pub unsafe fn root_as_alarm_unchecked(buf: &[u8]) -> Alarm {
  flatbuffers::root_unchecked::<Alarm>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Alarm and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Alarm`.
pub unsafe fn size_prefixed_root_as_alarm_unchecked(buf: &[u8]) -> Alarm {
  flatbuffers::size_prefixed_root_unchecked::<Alarm>(buf)
}
pub const ALARM_IDENTIFIER: &str = "al00";

#[inline]
pub fn alarm_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ALARM_IDENTIFIER, false)
}

#[inline]
pub fn alarm_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ALARM_IDENTIFIER, true)
}

#[inline]
pub fn finish_alarm_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Alarm<'a>>) {
  fbb.finish(root, Some(ALARM_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_alarm_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Alarm<'a>>) {
  fbb.finish_size_prefixed(root, Some(ALARM_IDENTIFIER));
}
